{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 223, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-1.5-flash-latest',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/medicine-checker.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview Provides AI-powered information about a specific medicine.\n *\n * - getMedicineInformation - A function to retrieve detailed information about a specific medicine.\n * - MedicineInformationInput - The input type for the getMedicineInformation function.\n * - MedicineInformationOutput - The return type for the getMedicineInformation function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst MedicineInformationInputSchema = z.object({\n  medicineName: z.string().optional().describe('The name of the medicine to get information about.'),\n  image: z.string().optional().describe(\n      \"A photo of the medicine, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'.\"\n    ),\n  language: z.string().describe('The language for the response.').optional(),\n});\nexport type MedicineInformationInput = z.infer<typeof MedicineInformationInputSchema>;\n\nconst MedicineInformationOutputSchema = z.object({\n  usageInfo: z.string().describe('Detailed and accurate information about what the medicine is used for, including its primary uses, and how it works. Include a disclaimer that this is not a substitute for professional medical advice and users should consult a doctor or pharmacist.'),\n});\nexport type MedicineInformationOutput = z.infer<typeof MedicineInformationOutputSchema>;\n\nexport async function getMedicineInformation(input: MedicineInformationInput): Promise<MedicineInformationOutput> {\n  return medicineInformationFlow(input);\n}\n\nconst medicineInformationPrompt = ai.definePrompt({\n  name: 'medicineInformationPrompt',\n  input: {schema: MedicineInformationInputSchema},\n  output: {schema: MedicineInformationOutputSchema},\n  prompt: `You are a pharmacist and medical expert. A user wants to know about a specific medicine. Provide accurate and easy-to-understand information about what the medicine is used for. Be clear and concise.\n  \n  {{#if image}}\n  Analyse the provided image to identify the medicine.\n  Image: {{media url=image}}\n  {{/if}}\n\n  {{#if medicineName}}\n  Medicine Name: {{{medicineName}}}\n  {{/if}}\n  \n  {{#if language}}\nThe user's preferred language is {{language}}. Respond in that language.\n{{/if}}\n`,\n});\n\nconst medicineInformationFlow = ai.defineFlow(\n  {\n    name: 'medicineInformationFlow',\n    inputSchema: MedicineInformationInputSchema,\n    outputSchema: MedicineInformationOutputSchema,\n  },\n  async input => {\n    const {output} = await medicineInformationPrompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,iCAAiC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC9C,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAC7C,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CACjC;IAEJ,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC,kCAAkC,QAAQ;AAC1E;AAGA,MAAM,kCAAkC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC/C,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACjC;AAGO,eAAe,uBAAuB,KAA+B;IAC1E,OAAO,wBAAwB;AACjC;AAEA,MAAM,4BAA4B,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAChD,MAAM;IACN,OAAO;QAAC,QAAQ;IAA8B;IAC9C,QAAQ;QAAC,QAAQ;IAA+B;IAChD,QAAQ,CAAC;;;;;;;;;;;;;;AAcX,CAAC;AACD;AAEA,MAAM,0BAA0B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC3C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,0BAA0B;IACjD,OAAO;AACT;;;IAlCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 317, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/dashboard/medicine-checker/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {getMedicineInformation as '404a2889515a88090e7ac9454f5c6155f8db0321f3'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 375, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/dashboard/medicine-checker/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/dashboard/medicine-checker/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard/medicine-checker/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA+S,GAC5U,6EACA","debugId":null}},
    {"offset": {"line": 389, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/dashboard/medicine-checker/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/dashboard/medicine-checker/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard/medicine-checker/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA2R,GACxT,yDACA","debugId":null}},
    {"offset": {"line": 403, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}