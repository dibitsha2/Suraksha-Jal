{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 223, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-1.5-flash-latest',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/prescription-reader.ts"],"sourcesContent":["\n'use server';\n\n/**\n * @fileOverview Analyzes a handwritten or printed prescription from an image.\n *\n * - readPrescription - A function to analyze the prescription image.\n * - PrescriptionReaderInput - The input type for the readPrescription function.\n * - PrescriptionReaderOutput - The return type for the readPrescription function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst PrescriptionReaderInputSchema = z.object({\n  prescriptionImage: z\n    .string()\n    .describe(\n      \"A photo of the doctor's prescription, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'.\"\n    ),\n    language: z.string().describe('The language for the response.').optional(),\n});\nexport type PrescriptionReaderInput = z.infer<typeof PrescriptionReaderInputSchema>;\n\nconst MedicineDetailsSchema = z.object({\n    name: z.string().describe('The name of the medicine.'),\n    dosage: z.string().describe('The dosage (e.g., \"500mg\", \"1 tablet\").'),\n    frequency: z.string().describe('How often to take the medicine, described in simple words (e.g., \"Twice a day\", \"Once at night\", \"One in the morning and one at night\").'),\n    instructions: z.string().optional().describe('Any additional instructions, like \"before food\" or \"for 5 days\".'),\n});\n\nconst PrescriptionReaderOutputSchema = z.object({\n    medicines: z.array(MedicineDetailsSchema).describe('A structured list of all medicines found in the prescription.'),\n    disclaimer: z.string().describe('A strong disclaimer that this is an AI-generated transcription and is not a substitute for the original prescription. The user should always verify with the original document and consult a pharmacist or doctor.'),\n});\nexport type PrescriptionReaderOutput = z.infer<typeof PrescriptionReaderOutputSchema>;\n\nexport async function readPrescription(input: PrescriptionReaderInput): Promise<PrescriptionReaderOutput> {\n  return prescriptionReaderFlow(input);\n}\n\nconst prescriptionReaderPrompt = ai.definePrompt({\n  name: 'prescriptionReaderPrompt',\n  input: {schema: PrescriptionReaderInputSchema},\n  output: {schema: PrescriptionReaderOutputSchema},\n  prompt: `You are a medical assistant with expertise in reading and transcribing doctor's prescriptions. Analyze the provided image of a prescription.\n\nYour task is to extract all the medicines, their dosages, frequency, and any specific instructions. Present this information in a clear, structured list.\n\nFor the 'frequency' field, you MUST use simple, easy-to-understand language. Do not use medical shorthand like \"1-0-1\" or \"TDS\". Instead, write it out clearly, for example: \"Once in the morning and once at night\" or \"Three times a day\".\n\nCritically, you MUST include a strong disclaimer stating that this is an AI-generated transcription and not a substitute for the original prescription. The user must verify the information with the original document and consult a doctor or pharmacist if they have any questions.\n\nImage of prescription: {{media url=prescriptionImage}}\n\n{{#if language}}\nRespond in the user's preferred language: {{{language}}}.\n{{/if}}\n`,\n});\n\nconst prescriptionReaderFlow = ai.defineFlow(\n  {\n    name: 'prescriptionReaderFlow',\n    inputSchema: PrescriptionReaderInputSchema,\n    outputSchema: PrescriptionReaderOutputSchema,\n  },\n  async input => {\n    const {output} = await prescriptionReaderPrompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAGA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,gCAAgC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC7C,mBAAmB,uIAAA,CAAA,IAAC,CACjB,MAAM,GACN,QAAQ,CACP;IAEF,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC,kCAAkC,QAAQ;AAC5E;AAGA,MAAM,wBAAwB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACnC,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC1B,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC5B,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC/B,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;AACjD;AAEA,MAAM,iCAAiC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC5C,WAAW,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,uBAAuB,QAAQ,CAAC;IACnD,YAAY,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACpC;AAGO,eAAe,iBAAiB,KAA8B;IACnE,OAAO,uBAAuB;AAChC;AAEA,MAAM,2BAA2B,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC/C,MAAM;IACN,OAAO;QAAC,QAAQ;IAA6B;IAC7C,QAAQ;QAAC,QAAQ;IAA8B;IAC/C,QAAQ,CAAC;;;;;;;;;;;;;AAaX,CAAC;AACD;AAEA,MAAM,yBAAyB,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC1C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,yBAAyB;IAChD,OAAO;AACT;;;IAjCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 322, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/dashboard/prescription-reader/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {readPrescription as '40d02926b142892b586c8a839a03a850c297c4f448'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 380, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/dashboard/prescription-reader/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/dashboard/prescription-reader/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard/prescription-reader/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAkT,GAC/U,gFACA","debugId":null}},
    {"offset": {"line": 394, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/dashboard/prescription-reader/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/dashboard/prescription-reader/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard/prescription-reader/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA8R,GAC3T,4DACA","debugId":null}},
    {"offset": {"line": 408, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}