{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 223, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.5-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/get-local-reports.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview Generates mock local area reports for waterborne diseases based on a location.\n *\n * - getLocalReports - A function to retrieve mock disease case data for a specific location.\n * - GetLocalReportsInput - The input type for the getLocalReports function.\n * - GetLocalReportsOutput - The return type for the getLocalReports function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst GetLocalReportsInputSchema = z.object({\n  location: z.string().describe(\"The user's location (e.g., city, region) to generate reports for.\"),\n});\nexport type GetLocalReportsInput = z.infer<typeof GetLocalReportsInputSchema>;\n\nconst ReportSchema = z.object({\n    disease: z.string().describe('The name of the waterborne disease.'),\n    cases: z.number().describe('The number of reported cases for this disease.'),\n    trend: z.enum(['up', 'down', 'stable']).describe('The trend of cases (up, down, or stable).'),\n});\n\nconst GetLocalReportsOutputSchema = z.object({\n  reports: z.array(ReportSchema).describe('A list of local area disease reports.'),\n});\nexport type GetLocalReportsOutput = z.infer<typeof GetLocalReportsOutputSchema>;\n\nexport async function getLocalReports(input: GetLocalReportsInput): Promise<GetLocalReportsOutput> {\n  return getLocalReportsFlow(input);\n}\n\nconst getLocalReportsPrompt = ai.definePrompt({\n  name: 'getLocalReportsPrompt',\n  input: {schema: GetLocalReportsInputSchema},\n  output: {schema: GetLocalReportsOutputSchema},\n  prompt: `You are a public health data analyst. Based on the user's location, generate a list of 4 realistic but mock (invented) local area reports for common waterborne diseases like Cholera, Typhoid, Hepatitis A, and Giardiasis.\n\nFor each report, provide the disease name, a number of cases, and a trend ('up', 'down', or 'stable'). The data should be plausible for the given location.\n\nLocation: {{{location}}}\n`,\n});\n\nconst getLocalReportsFlow = ai.defineFlow(\n  {\n    name: 'getLocalReportsFlow',\n    inputSchema: GetLocalReportsInputSchema,\n    outputSchema: GetLocalReportsOutputSchema,\n  },\n  async input => {\n    const {output} = await getLocalReportsPrompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,6BAA6B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1C,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAChC;AAGA,MAAM,eAAe,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1B,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC7B,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC3B,OAAO,uIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAM;QAAQ;KAAS,EAAE,QAAQ,CAAC;AACrD;AAEA,MAAM,8BAA8B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC3C,SAAS,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,cAAc,QAAQ,CAAC;AAC1C;AAGO,eAAe,gBAAgB,KAA2B;IAC/D,OAAO,oBAAoB;AAC7B;AAEA,MAAM,wBAAwB,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC5C,MAAM;IACN,OAAO;QAAC,QAAQ;IAA0B;IAC1C,QAAQ;QAAC,QAAQ;IAA2B;IAC5C,QAAQ,CAAC;;;;;AAKX,CAAC;AACD;AAEA,MAAM,sBAAsB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACvC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,sBAAsB;IAC7C,OAAO;AACT;;;IAzBoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 315, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/dashboard/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {getLocalReports as '40f14ca1bb54603a400d29b88e5dc5357dcab13f6c'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 373, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/dashboard/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/dashboard/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA8R,GAC3T,4DACA","debugId":null}},
    {"offset": {"line": 387, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/dashboard/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/dashboard/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA0Q,GACvS,wCACA","debugId":null}},
    {"offset": {"line": 401, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}