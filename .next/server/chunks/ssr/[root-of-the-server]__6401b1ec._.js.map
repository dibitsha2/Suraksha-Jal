{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 223, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-1.5-flash-latest',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/medicine-checker.ts"],"sourcesContent":["\n'use server';\n\n/**\n * @fileOverview Provides AI-powered information about a specific medicine.\n *\n * - getMedicineInformation - A function to retrieve detailed information about a specific medicine.\n * - MedicineInformationInput - The input type for the getMedicineInformation function.\n * - MedicineInformationOutput - The return type for the getMedicineInformation function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\nimport { googleAI } from '@genkit-ai/googleai';\n\nconst MedicineInformationInputSchema = z.object({\n  medicineName: z.string().optional().describe('The name of the medicine to get information about.'),\n  image: z.string().optional().describe(\n      \"A photo of the medicine, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'.\"\n    ),\n  language: z.string().describe('The language for the response.').optional(),\n});\nexport type MedicineInformationInput = z.infer<typeof MedicineInformationInputSchema>;\n\nconst MedicineInformationOutputSchema = z.object({\n  usageInfo: z.string().describe('Detailed and accurate information about what the medicine is used for, including its primary uses, and how it works. Include a disclaimer that this is not a substitute for professional medical advice and users should consult a doctor or pharmacist.'),\n});\nexport type MedicineInformationOutput = z.infer<typeof MedicineInformationOutputSchema>;\n\nexport async function getMedicineInformation(input: MedicineInformationInput): Promise<MedicineInformationOutput> {\n  return medicineInformationFlow(input);\n}\n\nconst medicineInformationPrompt = ai.definePrompt({\n  name: 'medicineInformationPrompt',\n  input: {schema: MedicineInformationInputSchema},\n  output: {schema: MedicineInformationOutputSchema},\n  model: googleAI.model('gemini-pro-vision'),\n  config: {\n    safetySettings: [\n        {\n            category: 'HARM_CATEGORY_DANGEROUS_CONTENT',\n            threshold: 'BLOCK_NONE',\n        },\n    ],\n  },\n  prompt: `You are a pharmacist and medical expert. A user wants to know about a specific medicine. Provide accurate and easy-to-understand information about what the medicine is used for. Be clear and concise.\n  \n  {{#if image}}\n  Analyse the provided image to identify the medicine.\n  Image: {{media url=image}}\n  {{/if}}\n\n  {{#if medicineName}}\n  Medicine Name: {{{medicineName}}}\n  {{/if}}\n  \n  {{#if language}}\nRespond in the user's preferred language: {{{language}}}.\n{{/if}}\n`,\n});\n\nconst medicineInformationFlow = ai.defineFlow(\n  {\n    name: 'medicineInformationFlow',\n    inputSchema: MedicineInformationInputSchema,\n    outputSchema: MedicineInformationOutputSchema,\n  },\n  async input => {\n    const {output} = await medicineInformationPrompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAGA;;;;;;CAMC,GAED;AACA;AAAA;AACA;AAAA;;;;;;;AAEA,MAAM,iCAAiC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC9C,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAC7C,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CACjC;IAEJ,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC,kCAAkC,QAAQ;AAC1E;AAGA,MAAM,kCAAkC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC/C,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACjC;AAGO,eAAe,uBAAuB,KAA+B;IAC1E,OAAO,wBAAwB;AACjC;AAEA,MAAM,4BAA4B,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAChD,MAAM;IACN,OAAO;QAAC,QAAQ;IAA8B;IAC9C,QAAQ;QAAC,QAAQ;IAA+B;IAChD,OAAO,2KAAA,CAAA,WAAQ,CAAC,KAAK,CAAC;IACtB,QAAQ;QACN,gBAAgB;YACZ;gBACI,UAAU;gBACV,WAAW;YACf;SACH;IACH;IACA,QAAQ,CAAC;;;;;;;;;;;;;;AAcX,CAAC;AACD;AAEA,MAAM,0BAA0B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC3C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,0BAA0B;IACjD,OAAO;AACT;;;IA3CoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 329, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/medicine-dosage-suggester.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview Provides AI-powered information about medicine dosage and instructions.\n *\n * - getMedicineDosage - A function to retrieve dosage information for a specific medicine.\n * - MedicineDosageInput - The input type for the getMedicineDosage function.\n * - MedicineDosageOutput - The return type for the getMedicineDosage function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst MedicineDosageInputSchema = z.object({\n  medicineName: z.string().describe('The name of the medicine to get dosage information about.'),\n  age: z.number().describe(\"The user's age.\"),\n  language: z.string().describe('The language for the response.').optional(),\n});\nexport type MedicineDosageInput = z.infer<typeof MedicineDosageInputSchema>;\n\nconst MedicineDosageOutputSchema = z.object({\n  dosage: z.string().describe('The recommended dosage amount for the given age (e.g., \"500mg\", \"1 tablet\").'),\n  timing: z.string().describe('Instructions on when to take the medicine relative to meals (e.g., \"After breakfast and dinner\", \"With food\").'),\n  timeOfDay: z.string().describe('The recommended time of day to take the medicine (e.g., \"Morning and Evening\", \"Before sleeping at night\").'),\n  disclaimer: z.string().describe('A strong disclaimer that this is not medical advice and the user must consult a qualified doctor or pharmacist for accurate dosage information.'),\n});\nexport type MedicineDosageOutput = z.infer<typeof MedicineDosageOutputSchema>;\n\nexport async function getMedicineDosage(input: MedicineDosageInput): Promise<MedicineDosageOutput> {\n  return medicineDosageFlow(input);\n}\n\nconst medicineDosagePrompt = ai.definePrompt({\n  name: 'medicineDosagePrompt',\n  input: {schema: MedicineDosageInputSchema},\n  output: {schema: MedicineDosageOutputSchema},\n  prompt: `You are an expert pharmacist. Based on the medicine name and user's age, provide typical dosage instructions for over-the-counter use. Be accurate and clear.\n\nSpecifically provide the following:\n1.  **Dosage**: The amount to take (e.g., \"500mg\", \"1 tablet\").\n2.  **Timing**: When to take it relative to food (e.g., \"With food\", \"On an empty stomach\").\n3.  **Time of Day**: What time of day to take it (e.g., \"Morning and Evening\", \"Only at night\").\n\nYou MUST provide a strong disclaimer that this information is for general guidance only and is not a substitute for professional medical advice. The user MUST consult a qualified doctor or pharmacist before taking any medication, as dosage can vary based on many factors.\n\nMedicine Name: {{{medicineName}}}\nUser's Age: {{{age}}}\n\n{{#if language}}\nRespond in the user's preferred language: {{{language}}}.\n{{/if}}\n`,\n});\n\nconst medicineDosageFlow = ai.defineFlow(\n  {\n    name: 'medicineDosageFlow',\n    inputSchema: MedicineDosageInputSchema,\n    outputSchema: MedicineDosageOutputSchema,\n  },\n  async input => {\n    const {output} = await medicineDosagePrompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,4BAA4B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACzC,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAClC,KAAK,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACzB,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC,kCAAkC,QAAQ;AAC1E;AAGA,MAAM,6BAA6B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1C,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC5B,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC5B,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC/B,YAAY,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAClC;AAGO,eAAe,kBAAkB,KAA0B;IAChE,OAAO,mBAAmB;AAC5B;AAEA,MAAM,uBAAuB,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC3C,MAAM;IACN,OAAO;QAAC,QAAQ;IAAyB;IACzC,QAAQ;QAAC,QAAQ;IAA0B;IAC3C,QAAQ,CAAC;;;;;;;;;;;;;;;AAeX,CAAC;AACD;AAEA,MAAM,qBAAqB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACtC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,qBAAqB;IAC5C,OAAO;AACT;;;IAnCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 414, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/text-to-speech.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview Converts text to speech.\n *\n * - textToSpeech - A function to convert text to speech.\n * - TextToSpeechInput - The input type for the textToSpeech function.\n * - TextToSpeechOutput - The return type for the textToSpeech function.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { googleAI } from '@genkit-ai/googleai';\nimport { z } from 'genkit';\nimport wav from 'wav';\n\nconst TextToSpeechInputSchema = z.object({\n  text: z.string().describe('The text to convert to speech.'),\n});\nexport type TextToSpeechInput = z.infer<typeof TextToSpeechInputSchema>;\n\nconst TextToSpeechOutputSchema = z.object({\n  audioDataUri: z\n    .string()\n    .describe(\n      \"The speech audio, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:audio/wav;base64,<encoded_data>'.\"\n    ),\n});\nexport type TextToSpeechOutput = z.infer<typeof TextToSpeechOutputSchema>;\n\nexport async function textToSpeech(input: TextToSpeechInput): Promise<TextToSpeechOutput> {\n  return textToSpeechFlow(input);\n}\n\nasync function toWav(\n  pcmData: Buffer,\n  channels = 1,\n  rate = 24000,\n  sampleWidth = 2\n): Promise<string> {\n  return new Promise((resolve, reject) => {\n    const writer = new wav.Writer({\n      channels,\n      sampleRate: rate,\n      bitDepth: sampleWidth * 8,\n    });\n\n    let bufs = [] as any[];\n    writer.on('error', reject);\n    writer.on('data', function (d) {\n      bufs.push(d);\n    });\n    writer.on('end', function () {\n      resolve(Buffer.concat(bufs).toString('base64'));\n    });\n\n    writer.write(pcmData);\n    writer.end();\n  });\n}\n\nconst textToSpeechFlow = ai.defineFlow(\n  {\n    name: 'textToSpeechFlow',\n    inputSchema: TextToSpeechInputSchema,\n    outputSchema: TextToSpeechOutputSchema,\n  },\n  async (input) => {\n    const { media } = await ai.generate({\n      model: googleAI.model('gemini-2.5-flash-preview-tts'),\n      config: {\n        responseModalities: ['AUDIO'],\n        speechConfig: {\n          voiceConfig: {\n            prebuiltVoiceConfig: { voiceName: 'Algenib' },\n          },\n        },\n      },\n      prompt: input.text,\n    });\n\n    if (!media) {\n      throw new Error('No media returned from TTS model.');\n    }\n\n    const audioBuffer = Buffer.from(\n      media.url.substring(media.url.indexOf(',') + 1),\n      'base64'\n    );\n\n    const wavBase64 = await toWav(audioBuffer);\n\n    return {\n      audioDataUri: `data:audio/wav;base64,${wavBase64}`,\n    };\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;AACA;AAAA;AACA;;;;;;;;AAEA,MAAM,0BAA0B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACvC,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC5B;AAGA,MAAM,2BAA2B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACxC,cAAc,uIAAA,CAAA,IAAC,CACZ,MAAM,GACN,QAAQ,CACP;AAEN;AAGO,eAAe,aAAa,KAAwB;IACzD,OAAO,iBAAiB;AAC1B;AAEA,eAAe,MACb,OAAe,EACf,WAAW,CAAC,EACZ,OAAO,KAAK,EACZ,cAAc,CAAC;IAEf,OAAO,IAAI,QAAQ,CAAC,SAAS;QAC3B,MAAM,SAAS,IAAI,4HAAA,CAAA,UAAG,CAAC,MAAM,CAAC;YAC5B;YACA,YAAY;YACZ,UAAU,cAAc;QAC1B;QAEA,IAAI,OAAO,EAAE;QACb,OAAO,EAAE,CAAC,SAAS;QACnB,OAAO,EAAE,CAAC,QAAQ,SAAU,CAAC;YAC3B,KAAK,IAAI,CAAC;QACZ;QACA,OAAO,EAAE,CAAC,OAAO;YACf,QAAQ,OAAO,MAAM,CAAC,MAAM,QAAQ,CAAC;QACvC;QAEA,OAAO,KAAK,CAAC;QACb,OAAO,GAAG;IACZ;AACF;AAEA,MAAM,mBAAmB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACpC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAO;IACL,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,mHAAA,CAAA,KAAE,CAAC,QAAQ,CAAC;QAClC,OAAO,2KAAA,CAAA,WAAQ,CAAC,KAAK,CAAC;QACtB,QAAQ;YACN,oBAAoB;gBAAC;aAAQ;YAC7B,cAAc;gBACZ,aAAa;oBACX,qBAAqB;wBAAE,WAAW;oBAAU;gBAC9C;YACF;QACF;QACA,QAAQ,MAAM,IAAI;IACpB;IAEA,IAAI,CAAC,OAAO;QACV,MAAM,IAAI,MAAM;IAClB;IAEA,MAAM,cAAc,OAAO,IAAI,CAC7B,MAAM,GAAG,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,OAAO,CAAC,OAAO,IAC7C;IAGF,MAAM,YAAY,MAAM,MAAM;IAE9B,OAAO;QACL,cAAc,CAAC,sBAAsB,EAAE,WAAW;IACpD;AACF;;;IAjEoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 507, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/dashboard/medicine-checker/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {getMedicineInformation as '404a2889515a88090e7ac9454f5c6155f8db0321f3'} from 'ACTIONS_MODULE0'\nexport {getMedicineDosage as '40bf2f63165a33ef4f8b3445ebf870db9f5955a232'} from 'ACTIONS_MODULE1'\nexport {textToSpeech as '4048b818e77bed60353b0f346a4ff49b6ee5d0fad8'} from 'ACTIONS_MODULE2'\n"],"names":[],"mappings":";AAAA;AACA;AACA","debugId":null}},
    {"offset": {"line": 577, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/dashboard/medicine-checker/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/dashboard/medicine-checker/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard/medicine-checker/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA+S,GAC5U,6EACA","debugId":null}},
    {"offset": {"line": 591, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/dashboard/medicine-checker/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/dashboard/medicine-checker/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard/medicine-checker/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA2R,GACxT,yDACA","debugId":null}},
    {"offset": {"line": 605, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}