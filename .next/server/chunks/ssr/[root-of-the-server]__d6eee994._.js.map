{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 223, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-1.5-flash-latest',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/symptom-based-disease-checker.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview A symptom-based disease checker AI agent.\n *\n * - symptomBasedDiseaseChecker - A function that handles the disease checking process based on symptoms.\n * - SymptomBasedDiseaseCheckerInput - The input type for the symptomBasedDiseaseChecker function.\n * - SymptomBasedDiseaseCheckerOutput - The return type for the symptomBasedDiseaseChecker function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst SymptomBasedDiseaseCheckerInputSchema = z.object({\n  symptoms: z\n    .string()\n    .describe(\"A description of the symptoms the user is experiencing.\"),\n  location: z\n    .string()\n    .optional()\n    .describe(\"The user's current location, if available.\"),\n  language: z.string().describe('The language for the response.').optional(),\n});\nexport type SymptomBasedDiseaseCheckerInput = z.infer<typeof SymptomBasedDiseaseCheckerInputSchema>;\n\nconst SymptomBasedDiseaseCheckerOutputSchema = z.object({\n  diseaseMatches: z.array(z.string()).describe(\"A list of potential waterborne diseases that match the provided symptoms.\"),\n  preventiveMeasures: z.string().describe(\"Preventive measures the user can take based on the potential diseases.\"),\n  additionalInformation: z.string().describe(\"Additional information about the potential diseases and related health advice.\"),\n  suggestedMedicines: z.array(z.string()).describe(\"A list of common over-the-counter medicines that might help alleviate symptoms. This is not a prescription.\"),\n});\nexport type SymptomBasedDiseaseCheckerOutput = z.infer<typeof SymptomBasedDiseaseCheckerOutputSchema>;\n\nexport async function symptomBasedDiseaseChecker(input: SymptomBasedDiseaseCheckerInput): Promise<SymptomBasedDiseaseCheckerOutput> {\n  return symptomBasedDiseaseCheckerFlow(input);\n}\n\nconst symptomBasedDiseaseCheckerPrompt = ai.definePrompt({\n  name: 'symptomBasedDiseaseCheckerPrompt',\n  input: {schema: SymptomBasedDiseaseCheckerInputSchema},\n  output: {schema: SymptomBasedDiseaseCheckerOutputSchema},\n  prompt: `You are a medical assistant specializing in waterborne diseases. Based on the symptoms provided by the user, you will identify potential matching diseases, preventive measures, and additional information. Also suggest some common over-the-counter medicines that may help with the symptoms, but strongly advise consulting a doctor.\n\nSymptoms: {{{symptoms}}}\nLocation (if available): {{{location}}}\n\n{{#if language}}\nThe user's preferred language is {{language}}. Respond in that language.\n{{/if}}\n\nRespond in the following format:\n\nDisease Matches: [list of potential waterborne diseases]\nPreventive Measures: [preventive measures the user can take]\nAdditional Information: [additional information about the potential diseases and related health advice]\nSuggested Medicines: [list of common over-the-counter medicines]`,\n});\n\nconst symptomBasedDiseaseCheckerFlow = ai.defineFlow(\n  {\n    name: 'symptomBasedDiseaseCheckerFlow',\n    inputSchema: SymptomBasedDiseaseCheckerInputSchema,\n    outputSchema: SymptomBasedDiseaseCheckerOutputSchema,\n  },\n  async input => {\n    const {output} = await symptomBasedDiseaseCheckerPrompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AACA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,wCAAwC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrD,UAAU,uIAAA,CAAA,IAAC,CACR,MAAM,GACN,QAAQ,CAAC;IACZ,UAAU,uIAAA,CAAA,IAAC,CACR,MAAM,GACN,QAAQ,GACR,QAAQ,CAAC;IACZ,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC,kCAAkC,QAAQ;AAC1E;AAGA,MAAM,yCAAyC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACtD,gBAAgB,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IAAI,QAAQ,CAAC;IAC7C,oBAAoB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACxC,uBAAuB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC3C,oBAAoB,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IAAI,QAAQ,CAAC;AACnD;AAGO,eAAe,2BAA2B,KAAsC;IACrF,OAAO,+BAA+B;AACxC;AAEA,MAAM,mCAAmC,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IACvD,MAAM;IACN,OAAO;QAAC,QAAQ;IAAqC;IACrD,QAAQ;QAAC,QAAQ;IAAsC;IACvD,QAAQ,CAAC;;;;;;;;;;;;;;gEAcqD,CAAC;AACjE;AAEA,MAAM,iCAAiC,mHAAA,CAAA,KAAE,CAAC,UAAU,CAClD;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,iCAAiC;IACxD,OAAO;AACT;;;IAlCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 320, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/ai-powered-disease-information.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview Provides AI-powered information about waterborne diseases.\n *\n * - getDiseaseInformation - A function to retrieve detailed information about a specific disease.\n * - DiseaseInformationInput - The input type for the getDiseaseInformation function.\n * - DiseaseInformationOutput - The return type for the getDiseaseInformation function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst DiseaseInformationInputSchema = z.object({\n  diseaseName: z.string().describe('The name of the waterborne disease to get information about.'),\n  symptoms: z.string().describe('A comma separated list of symptoms the user is experiencing.'),\n  language: z.string().describe('The language for the response.').optional(),\n});\nexport type DiseaseInformationInput = z.infer<typeof DiseaseInformationInputSchema>;\n\nconst DiseaseInformationOutputSchema = z.object({\n  diseaseInfo: z.string().describe('Detailed information about the waterborne disease, including causes, prevention, and treatment.'),\n});\nexport type DiseaseInformationOutput = z.infer<typeof DiseaseInformationOutputSchema>;\n\nexport async function getDiseaseInformation(input: DiseaseInformationInput): Promise<DiseaseInformationOutput> {\n  return diseaseInformationFlow(input);\n}\n\nconst diseaseInformationPrompt = ai.definePrompt({\n  name: 'diseaseInformationPrompt',\n  input: {schema: DiseaseInformationInputSchema},\n  output: {schema: DiseaseInformationOutputSchema},\n  prompt: `You are a medical expert specializing in waterborne diseases. A user is experiencing some symptoms and you have diagnosed a potential waterborne disease. Provide detailed information about the disease, including its causes, and how to prevent it. Also provide treatment information.\n\nDisease Name: {{{diseaseName}}}\nUser Symptoms: {{{symptoms}}}\n\n{{#if language}}\nThe user's preferred language is {{language}}. Respond in that language.\n{{/if}}\n`,\n});\n\nconst diseaseInformationFlow = ai.defineFlow(\n  {\n    name: 'diseaseInformationFlow',\n    inputSchema: DiseaseInformationInputSchema,\n    outputSchema: DiseaseInformationOutputSchema,\n  },\n  async input => {\n    const {output} = await diseaseInformationPrompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,gCAAgC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC7C,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACjC,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC,kCAAkC,QAAQ;AAC1E;AAGA,MAAM,iCAAiC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC9C,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACnC;AAGO,eAAe,sBAAsB,KAA8B;IACxE,OAAO,uBAAuB;AAChC;AAEA,MAAM,2BAA2B,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC/C,MAAM;IACN,OAAO;QAAC,QAAQ;IAA6B;IAC7C,QAAQ;QAAC,QAAQ;IAA8B;IAC/C,QAAQ,CAAC;;;;;;;;AAQX,CAAC;AACD;AAEA,MAAM,yBAAyB,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC1C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,yBAAyB;IAChD,OAAO;AACT;;;IA5BoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 387, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/dashboard/symptom-checker/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {symptomBasedDiseaseChecker as '40f39c7ee987207991a9dfb568f8701e4d7e8b8b34'} from 'ACTIONS_MODULE0'\nexport {getDiseaseInformation as '404f2aedd15eb50876e4755bbda1f729d925d5bae3'} from 'ACTIONS_MODULE1'\n"],"names":[],"mappings":";AAAA;AACA","debugId":null}},
    {"offset": {"line": 451, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/dashboard/symptom-checker/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/dashboard/symptom-checker/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard/symptom-checker/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA8S,GAC3U,4EACA","debugId":null}},
    {"offset": {"line": 465, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/dashboard/symptom-checker/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/dashboard/symptom-checker/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard/symptom-checker/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA0R,GACvT,wDACA","debugId":null}},
    {"offset": {"line": 479, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}