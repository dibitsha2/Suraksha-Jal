{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 223, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-1.5-flash-latest',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/symptom-based-disease-checker.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview A symptom-based disease checker AI agent.\n *\n * - symptomBasedDiseaseChecker - A function that handles the disease checking process based on symptoms.\n * - SymptomBasedDiseaseCheckerInput - The input type for the symptomBasedDiseaseChecker function.\n * - SymptomBasedDiseaseCheckerOutput - The return type for the symptomBasedDiseaseChecker function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst SymptomBasedDiseaseCheckerInputSchema = z.object({\n  symptoms: z\n    .string()\n    .describe(\"A description of the symptoms the user is experiencing.\"),\n  location: z\n    .string()\n    .optional()\n    .describe(\"The user's current location, if available.\"),\n  language: z.string().describe('The language for the response.').optional(),\n});\nexport type SymptomBasedDiseaseCheckerInput = z.infer<typeof SymptomBasedDiseaseCheckerInputSchema>;\n\nconst SymptomBasedDiseaseCheckerOutputSchema = z.object({\n  diseaseMatches: z.array(z.string()).describe(\"A list of potential waterborne diseases that match the provided symptoms.\"),\n  preventiveMeasures: z.array(z.string()).describe(\"A list of preventive measures the user can take based on the potential diseases.\"),\n  additionalInformation: z.array(z.string()).describe(\"A list of additional information points about the potential diseases and related health advice.\"),\n  suggestedMedicines: z.array(z.string()).describe(\"A list of common over-the-counter medicines that might help alleviate symptoms. This is not a prescription.\"),\n});\nexport type SymptomBasedDiseaseCheckerOutput = z.infer<typeof SymptomBasedDiseaseCheckerOutputSchema>;\n\nexport async function symptomBasedDiseaseChecker(input: SymptomBasedDiseaseCheckerInput): Promise<SymptomBasedDiseaseCheckerOutput> {\n  return symptomBasedDiseaseCheckerFlow(input);\n}\n\nconst symptomBasedDiseaseCheckerPrompt = ai.definePrompt({\n  name: 'symptomBasedDiseaseCheckerPrompt',\n  input: {schema: SymptomBasedDiseaseCheckerInputSchema},\n  output: {schema: SymptomBasedDiseaseCheckerOutputSchema},\n  prompt: `You are a medical assistant specializing in waterborne diseases. Based on the symptoms provided by the user, you will identify potential matching diseases. \n  \nAlso provide a list of preventive measures, a list of additional information points, and suggest some common over-the-counter medicines that may help with the symptoms, but strongly advise consulting a doctor.\n\nSymptoms: {{{symptoms}}}\nLocation (if available): {{{location}}}\n\n{{#if language}}\nThe user's preferred language is {{language}}. Respond in that language.\n{{/if}}\n`,\n});\n\nconst symptomBasedDiseaseCheckerFlow = ai.defineFlow(\n  {\n    name: 'symptomBasedDiseaseCheckerFlow',\n    inputSchema: SymptomBasedDiseaseCheckerInputSchema,\n    outputSchema: SymptomBasedDiseaseCheckerOutputSchema,\n  },\n  async input => {\n    const {output} = await symptomBasedDiseaseCheckerPrompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AACA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,wCAAwC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrD,UAAU,uIAAA,CAAA,IAAC,CACR,MAAM,GACN,QAAQ,CAAC;IACZ,UAAU,uIAAA,CAAA,IAAC,CACR,MAAM,GACN,QAAQ,GACR,QAAQ,CAAC;IACZ,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC,kCAAkC,QAAQ;AAC1E;AAGA,MAAM,yCAAyC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACtD,gBAAgB,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IAAI,QAAQ,CAAC;IAC7C,oBAAoB,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IAAI,QAAQ,CAAC;IACjD,uBAAuB,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IAAI,QAAQ,CAAC;IACpD,oBAAoB,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IAAI,QAAQ,CAAC;AACnD;AAGO,eAAe,2BAA2B,KAAsC;IACrF,OAAO,+BAA+B;AACxC;AAEA,MAAM,mCAAmC,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IACvD,MAAM;IACN,OAAO;QAAC,QAAQ;IAAqC;IACrD,QAAQ;QAAC,QAAQ;IAAsC;IACvD,QAAQ,CAAC;;;;;;;;;;AAUX,CAAC;AACD;AAEA,MAAM,iCAAiC,mHAAA,CAAA,KAAE,CAAC,UAAU,CAClD;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,iCAAiC;IACxD,OAAO;AACT;;;IA9BoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 316, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/ai-powered-disease-information.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview Provides AI-powered information about waterborne diseases.\n *\n * - getDiseaseInformation - A function to retrieve detailed information about a specific disease.\n * - DiseaseInformationInput - The input type for the getDiseaseInformation function.\n * - DiseaseInformationOutput - The return type for the getDiseaseInformation function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst DiseaseInformationInputSchema = z.object({\n  diseaseName: z.string().describe('The name of the waterborne disease to get information about.'),\n  symptoms: z.string().describe('A comma separated list of symptoms the user is experiencing.'),\n  language: z.string().describe('The language for the response.').optional(),\n});\nexport type DiseaseInformationInput = z.infer<typeof DiseaseInformationInputSchema>;\n\nconst DiseaseInformationOutputSchema = z.object({\n  diseaseInfo: z.string().describe('Detailed information about the waterborne disease, including causes, prevention, and treatment.'),\n});\nexport type DiseaseInformationOutput = z.infer<typeof DiseaseInformationOutputSchema>;\n\nexport async function getDiseaseInformation(input: DiseaseInformationInput): Promise<DiseaseInformationOutput> {\n  return diseaseInformationFlow(input);\n}\n\nconst diseaseInformationPrompt = ai.definePrompt({\n  name: 'diseaseInformationPrompt',\n  input: {schema: DiseaseInformationInputSchema},\n  output: {schema: DiseaseInformationOutputSchema},\n  prompt: `You are a medical expert specializing in waterborne diseases. A user is experiencing some symptoms and you have diagnosed a potential waterborne disease. Provide detailed information about the disease, including its causes, and how to prevent it. Also provide treatment information.\n\nDisease Name: {{{diseaseName}}}\nUser Symptoms: {{{symptoms}}}\n\n{{#if language}}\nThe user's preferred language is {{language}}. Respond in that language.\n{{/if}}\n`,\n});\n\nconst diseaseInformationFlow = ai.defineFlow(\n  {\n    name: 'diseaseInformationFlow',\n    inputSchema: DiseaseInformationInputSchema,\n    outputSchema: DiseaseInformationOutputSchema,\n  },\n  async input => {\n    const {output} = await diseaseInformationPrompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,gCAAgC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC7C,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACjC,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC,kCAAkC,QAAQ;AAC1E;AAGA,MAAM,iCAAiC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC9C,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACnC;AAGO,eAAe,sBAAsB,KAA8B;IACxE,OAAO,uBAAuB;AAChC;AAEA,MAAM,2BAA2B,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC/C,MAAM;IACN,OAAO;QAAC,QAAQ;IAA6B;IAC7C,QAAQ;QAAC,QAAQ;IAA8B;IAC/C,QAAQ,CAAC;;;;;;;;AAQX,CAAC;AACD;AAEA,MAAM,yBAAyB,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC1C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,yBAAyB;IAChD,OAAO;AACT;;;IA5BoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 383, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/speech-to-text.ts"],"sourcesContent":["\n'use server';\n\n/**\n * @fileOverview Transcribes audio to text.\n *\n * - speechToText - A function to transcribe audio.\n * - SpeechToTextInput - The input type for the speechToToxtext function.\n * - SpeechToTextOutput - The return type for the speechToText function.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { googleAI } from '@genkit-ai/googleai';\nimport { z } from 'genkit';\n\nconst SpeechToTextInputSchema = z.object({\n  audioDataUri: z\n    .string()\n    .describe(\n      \"The audio to transcribe, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'.\"\n    ),\n  language: z.string().describe('The language of the audio.').optional(),\n});\nexport type SpeechToTextInput = z.infer<typeof SpeechToTextInputSchema>;\n\nconst SpeechToTextOutputSchema = z.object({\n  transcription: z.string().describe('The transcribed text.'),\n});\nexport type SpeechToTextOutput = z.infer<typeof SpeechToTextOutputSchema>;\n\nexport async function speechToText(input: SpeechToTextInput): Promise<SpeechToTextOutput> {\n  return speechToTextFlow(input);\n}\n\nconst speechToTextFlow = ai.defineFlow(\n  {\n    name: 'speechToTextFlow',\n    inputSchema: SpeechToTextInputSchema,\n    outputSchema: SpeechToTextOutputSchema,\n  },\n  async (input) => {\n    const { text } = await ai.generate({\n      model: googleAI.model('gemini-1.5-flash-latest'),\n      prompt: [\n        {\n          media: {\n            url: input.audioDataUri,\n          },\n        },\n        {\n          text: `Transcribe the audio. The user is speaking in ${input.language || 'the auto-detected language'}.`,\n        }\n      ],\n    });\n    \n    return { transcription: text };\n  }\n);\n"],"names":[],"mappings":";;;;;AAGA;;;;;;CAMC,GAED;AACA;AAAA;AACA;AAAA;;;;;;;AAEA,MAAM,0BAA0B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACvC,cAAc,uIAAA,CAAA,IAAC,CACZ,MAAM,GACN,QAAQ,CACP;IAEJ,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC,8BAA8B,QAAQ;AACtE;AAGA,MAAM,2BAA2B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACxC,eAAe,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACrC;AAGO,eAAe,aAAa,KAAwB;IACzD,OAAO,iBAAiB;AAC1B;AAEA,MAAM,mBAAmB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACpC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAO;IACL,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,mHAAA,CAAA,KAAE,CAAC,QAAQ,CAAC;QACjC,OAAO,2KAAA,CAAA,WAAQ,CAAC,KAAK,CAAC;QACtB,QAAQ;YACN;gBACE,OAAO;oBACL,KAAK,MAAM,YAAY;gBACzB;YACF;YACA;gBACE,MAAM,CAAC,8CAA8C,EAAE,MAAM,QAAQ,IAAI,6BAA6B,CAAC,CAAC;YAC1G;SACD;IACH;IAEA,OAAO;QAAE,eAAe;IAAK;AAC/B;;;IA1BoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 456, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/text-to-speech.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview Converts text to speech.\n *\n * - textToSpeech - A function to convert text to speech.\n * - TextToSpeechInput - The input type for the textToSpeech function.\n * - TextToSpeechOutput - The return type for the textToSpeech function.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { googleAI } from '@genkit-ai/googleai';\nimport { z } from 'genkit';\nimport wav from 'wav';\n\nconst TextToSpeechInputSchema = z.object({\n  text: z.string().describe('The text to convert to speech.'),\n});\nexport type TextToSpeechInput = z.infer<typeof TextToSpeechInputSchema>;\n\nconst TextToSpeechOutputSchema = z.object({\n  audioDataUri: z\n    .string()\n    .describe(\n      \"The speech audio, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:audio/wav;base64,<encoded_data>'.\"\n    ),\n});\nexport type TextToSpeechOutput = z.infer<typeof TextToSpeechOutputSchema>;\n\nexport async function textToSpeech(input: TextToSpeechInput): Promise<TextToSpeechOutput> {\n  return textToSpeechFlow(input);\n}\n\nasync function toWav(\n  pcmData: Buffer,\n  channels = 1,\n  rate = 24000,\n  sampleWidth = 2\n): Promise<string> {\n  return new Promise((resolve, reject) => {\n    const writer = new wav.Writer({\n      channels,\n      sampleRate: rate,\n      bitDepth: sampleWidth * 8,\n    });\n\n    let bufs = [] as any[];\n    writer.on('error', reject);\n    writer.on('data', function (d) {\n      bufs.push(d);\n    });\n    writer.on('end', function () {\n      resolve(Buffer.concat(bufs).toString('base64'));\n    });\n\n    writer.write(pcmData);\n    writer.end();\n  });\n}\n\nconst textToSpeechFlow = ai.defineFlow(\n  {\n    name: 'textToSpeechFlow',\n    inputSchema: TextToSpeechInputSchema,\n    outputSchema: TextToSpeechOutputSchema,\n  },\n  async (input) => {\n    const { media } = await ai.generate({\n      model: googleAI.model('gemini-2.5-flash-preview-tts'),\n      config: {\n        responseModalities: ['AUDIO'],\n        speechConfig: {\n          voiceConfig: {\n            prebuiltVoiceConfig: { voiceName: 'Algenib' },\n          },\n        },\n      },\n      prompt: input.text,\n    });\n\n    if (!media) {\n      throw new Error('No media returned from TTS model.');\n    }\n\n    const audioBuffer = Buffer.from(\n      media.url.substring(media.url.indexOf(',') + 1),\n      'base64'\n    );\n\n    const wavBase64 = await toWav(audioBuffer);\n\n    return {\n      audioDataUri: `data:audio/wav;base64,${wavBase64}`,\n    };\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;AACA;AAAA;AACA;;;;;;;;AAEA,MAAM,0BAA0B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACvC,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC5B;AAGA,MAAM,2BAA2B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACxC,cAAc,uIAAA,CAAA,IAAC,CACZ,MAAM,GACN,QAAQ,CACP;AAEN;AAGO,eAAe,aAAa,KAAwB;IACzD,OAAO,iBAAiB;AAC1B;AAEA,eAAe,MACb,OAAe,EACf,WAAW,CAAC,EACZ,OAAO,KAAK,EACZ,cAAc,CAAC;IAEf,OAAO,IAAI,QAAQ,CAAC,SAAS;QAC3B,MAAM,SAAS,IAAI,4HAAA,CAAA,UAAG,CAAC,MAAM,CAAC;YAC5B;YACA,YAAY;YACZ,UAAU,cAAc;QAC1B;QAEA,IAAI,OAAO,EAAE;QACb,OAAO,EAAE,CAAC,SAAS;QACnB,OAAO,EAAE,CAAC,QAAQ,SAAU,CAAC;YAC3B,KAAK,IAAI,CAAC;QACZ;QACA,OAAO,EAAE,CAAC,OAAO;YACf,QAAQ,OAAO,MAAM,CAAC,MAAM,QAAQ,CAAC;QACvC;QAEA,OAAO,KAAK,CAAC;QACb,OAAO,GAAG;IACZ;AACF;AAEA,MAAM,mBAAmB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACpC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAO;IACL,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,mHAAA,CAAA,KAAE,CAAC,QAAQ,CAAC;QAClC,OAAO,2KAAA,CAAA,WAAQ,CAAC,KAAK,CAAC;QACtB,QAAQ;YACN,oBAAoB;gBAAC;aAAQ;YAC7B,cAAc;gBACZ,aAAa;oBACX,qBAAqB;wBAAE,WAAW;oBAAU;gBAC9C;YACF;QACF;QACA,QAAQ,MAAM,IAAI;IACpB;IAEA,IAAI,CAAC,OAAO;QACV,MAAM,IAAI,MAAM;IAClB;IAEA,MAAM,cAAc,OAAO,IAAI,CAC7B,MAAM,GAAG,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,OAAO,CAAC,OAAO,IAC7C;IAGF,MAAM,YAAY,MAAM,MAAM;IAE9B,OAAO;QACL,cAAc,CAAC,sBAAsB,EAAE,WAAW;IACpD;AACF;;;IAjEoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 549, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/dashboard/symptom-checker/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {symptomBasedDiseaseChecker as '40f39c7ee987207991a9dfb568f8701e4d7e8b8b34'} from 'ACTIONS_MODULE0'\nexport {getDiseaseInformation as '404f2aedd15eb50876e4755bbda1f729d925d5bae3'} from 'ACTIONS_MODULE1'\nexport {speechToText as '40a6974bbe2337d98933495bd99ef7d094b4545135'} from 'ACTIONS_MODULE2'\nexport {textToSpeech as '4048b818e77bed60353b0f346a4ff49b6ee5d0fad8'} from 'ACTIONS_MODULE3'\n"],"names":[],"mappings":";AAAA;AACA;AACA;AACA","debugId":null}},
    {"offset": {"line": 625, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/dashboard/symptom-checker/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/dashboard/symptom-checker/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard/symptom-checker/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA8S,GAC3U,4EACA","debugId":null}},
    {"offset": {"line": 639, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/dashboard/symptom-checker/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/dashboard/symptom-checker/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard/symptom-checker/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA0R,GACvT,wDACA","debugId":null}},
    {"offset": {"line": 653, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}