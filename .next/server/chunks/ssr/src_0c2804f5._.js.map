{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 88, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/prescription-reader.ts"],"sourcesContent":["\n'use server';\n\n/**\n * @fileOverview Analyzes a handwritten or printed prescription from an image.\n *\n * - readPrescription - A function to analyze the prescription image.\n * - PrescriptionReaderInput - The input type for the readPrescription function.\n * - PrescriptionReaderOutput - The return type for the readPrescription function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst PrescriptionReaderInputSchema = z.object({\n  prescriptionImage: z\n    .string()\n    .describe(\n      \"A photo of the doctor's prescription, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'.\"\n    ),\n    language: z.string().describe('The language for the response.').optional(),\n});\nexport type PrescriptionReaderInput = z.infer<typeof PrescriptionReaderInputSchema>;\n\nconst MedicineDetailsSchema = z.object({\n    name: z.string().describe('The name of the medicine.'),\n    dosage: z.string().describe('The dosage (e.g., \"500mg\", \"1 tablet\").'),\n    frequency: z.string().describe('How often to take the medicine, described in simple words (e.g., \"Twice a day\", \"Once at night\", \"One in the morning and one at night\").'),\n    instructions: z.string().optional().describe('Any additional instructions, like \"before food\" or \"for 5 days\".'),\n});\n\nconst PrescriptionReaderOutputSchema = z.object({\n    medicines: z.array(MedicineDetailsSchema).describe('A structured list of all medicines found in the prescription.'),\n    disclaimer: z.string().describe('A strong disclaimer that this is an AI-generated transcription and is not a substitute for the original prescription. The user should always verify with the original document and consult a pharmacist or doctor.'),\n});\nexport type PrescriptionReaderOutput = z.infer<typeof PrescriptionReaderOutputSchema>;\n\nexport async function readPrescription(input: PrescriptionReaderInput): Promise<PrescriptionReaderOutput> {\n  return prescriptionReaderFlow(input);\n}\n\nconst prescriptionReaderPrompt = ai.definePrompt({\n  name: 'prescriptionReaderPrompt',\n  input: {schema: PrescriptionReaderInputSchema},\n  output: {schema: PrescriptionReaderOutputSchema},\n  prompt: `You are a medical assistant with expertise in reading and transcribing doctor's prescriptions. Analyze the provided image of a prescription.\n\nYour task is to extract all the medicines, their dosages, frequency, and any specific instructions. Present this information in a clear, structured list.\n\nFor the 'frequency' field, you MUST use simple, easy-to-understand language. Do not use medical shorthand like \"1-0-1\" or \"TDS\". Instead, write it out clearly, for example: \"Once in the morning and once at night\" or \"Three times a day\".\n\nCritically, you MUST include a strong disclaimer stating that this is an AI-generated transcription and not a substitute for the original prescription. The user must verify the information with the original document and consult a doctor or pharmacist if they have any questions.\n\nImage of prescription: {{media url=prescriptionImage}}\n\n{{#if language}}\nRespond in the user's preferred language: {{{language}}}.\n{{/if}}\n`,\n});\n\nconst prescriptionReaderFlow = ai.defineFlow(\n  {\n    name: 'prescriptionReaderFlow',\n    inputSchema: PrescriptionReaderInputSchema,\n    outputSchema: PrescriptionReaderOutputSchema,\n  },\n  async input => {\n    const {output} = await prescriptionReaderPrompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;;IAqCsB,mBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 101, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/alert.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n"],"names":[],"mappings":";;;;;;AAAA;AACA;AAEA;;;;;AAEA,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB,6JACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aACE;QACJ;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAGF,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG3B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,OAAO,EAAE,oBACnC,8OAAC;QACC,KAAK;QACL,MAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,cAAc;YAAE;QAAQ,IAAI;QACzC,GAAG,KAAK;;;;;;AAGb,MAAM,WAAW,GAAG;AAEpB,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,gDAAgD;QAC7D,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,iCAAmB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGtC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,iBAAiB,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 165, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/dashboard/prescription-reader/page.tsx"],"sourcesContent":["\n'use client';\n\nimport { useState, useRef, useEffect } from 'react';\nimport { Loader2, Sparkles, AlertTriangle, Camera, ScanLine, Upload, FileScan, Info, Pill } from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card';\nimport {\n  readPrescription,\n  type PrescriptionReaderOutput,\n} from '@/ai/flows/prescription-reader';\nimport { useLanguage } from '@/hooks/use-language';\nimport { useToast } from '@/hooks/use-toast';\nimport { Alert, AlertTitle, AlertDescription } from '@/components/ui/alert';\nimport Image from 'next/image';\n\nexport default function PrescriptionReaderPage() {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [result, setResult] = useState<PrescriptionReaderOutput | null>(null);\n  const { effectiveLanguage } = useLanguage();\n  const { toast } = useToast();\n\n  const [isCameraOpen, setIsCameraOpen] = useState(false);\n  const [hasCameraPermission, setHasCameraPermission] = useState<boolean | null>(null);\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [capturedImage, setCapturedImage] = useState<string | null>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (isCameraOpen) {\n        const getCameraPermission = async () => {\n          try {\n            const stream = await navigator.mediaDevices.getUserMedia({ video: { facingMode: 'environment' }});\n            setHasCameraPermission(true);\n\n            if (videoRef.current) {\n              videoRef.current.srcObject = stream;\n            }\n          } catch (error) {\n            console.error('Error accessing camera:', error);\n            setHasCameraPermission(false);\n            setIsCameraOpen(false);\n            toast({\n              variant: 'destructive',\n              title: 'Camera Access Denied',\n              description: 'Please enable camera permissions in your browser settings to use this feature.',\n            });\n          }\n        };\n        getCameraPermission();\n    } else {\n        if (videoRef.current?.srcObject) {\n            const stream = videoRef.current.srcObject as MediaStream;\n            stream.getTracks().forEach(track => track.stop());\n            videoRef.current.srcObject = null;\n        }\n    }\n  }, [isCameraOpen, toast]);\n  \n  const handleCapture = () => {\n    if (videoRef.current && canvasRef.current) {\n        const video = videoRef.current;\n        const canvas = canvasRef.current;\n        canvas.width = video.videoWidth;\n        canvas.height = video.videoHeight;\n        const context = canvas.getContext('2d');\n        if (context) {\n            context.drawImage(video, 0, 0, video.videoWidth, video.videoHeight);\n            const dataUrl = canvas.toDataURL('image/jpeg');\n            setCapturedImage(dataUrl);\n            setIsCameraOpen(false);\n        }\n    }\n  };\n  \n  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n        const reader = new FileReader();\n        reader.onloadend = () => {\n            setCapturedImage(reader.result as string);\n        }\n        reader.readAsDataURL(file);\n    }\n  };\n\n  const handleAnalyze = async () => {\n    if (!capturedImage) {\n        toast({\n            variant: 'destructive',\n            title: 'No Image Provided',\n            description: 'Please upload or capture an image of the prescription first.',\n        });\n        return;\n    }\n\n    setLoading(true);\n    setError(null);\n    setResult(null);\n\n    try {\n      const response = await readPrescription({\n        prescriptionImage: capturedImage,\n        language: effectiveLanguage,\n      });\n      setResult(response);\n    } catch (e) {\n      console.error(e);\n      setError('An error occurred while analyzing the prescription. Please ensure the image is clear and try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  return (\n    <div className=\"flex flex-col gap-6\">\n       <div className=\"flex items-center\">\n        <h1 className=\"text-lg font-semibold md:text-2xl font-headline\">Prescription Reader</h1>\n      </div>\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"font-headline text-2xl\">AI Prescription Reader</CardTitle>\n          <CardDescription>\n            Upload or take a photo of a doctor's prescription to get a clear, digital version.\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                 <Button type=\"button\" variant=\"outline\" className=\"w-full h-12\" onClick={() => fileInputRef.current?.click()}>\n                    <Upload className=\"mr-2 h-5 w-5\" />\n                    Upload Prescription Image\n                 </Button>\n                 <input \n                    type=\"file\" \n                    ref={fileInputRef} \n                    className=\"hidden\" \n                    accept=\"image/*\"\n                    onChange={handleFileUpload}\n                 />\n\n                 <Button type=\"button\" variant=\"outline\" className=\"w-full h-12\" onClick={() => setIsCameraOpen(true)}>\n                     <Camera className=\"mr-2 h-5 w-5\" />\n                     Scan with Camera\n                 </Button>\n            </div>\n\n            {isCameraOpen && (\n                <div className=\"space-y-4\">\n                    <video ref={videoRef} className=\"w-full aspect-video rounded-md bg-muted\" autoPlay muted playsInline />\n                    {hasCameraPermission === false && (\n                         <Alert variant=\"destructive\">\n                            <AlertTitle>Camera Access Required</AlertTitle>\n                            <AlertDescription>Please allow camera access in your browser settings to use this feature.</AlertDescription>\n                        </Alert>\n                    )}\n                     <div className=\"flex gap-4\">\n                        <Button type=\"button\" className=\"w-full\" onClick={handleCapture} disabled={hasCameraPermission === false}>\n                            <ScanLine className=\"mr-2\" />\n                            Capture\n                        </Button>\n                        <Button type=\"button\" variant=\"ghost\" onClick={() => setIsCameraOpen(false)}>Cancel</Button>\n                    </div>\n                </div>\n            )}\n            \n            {capturedImage && (\n                <div className=\"space-y-4 text-center border p-4 rounded-lg\">\n                     <Image src={capturedImage} alt=\"Captured prescription\" width={400} height={300} className=\"rounded-md mx-auto\" />\n                     <p className=\"text-sm text-muted-foreground\">Image ready for analysis.</p>\n                     <Button type=\"button\" variant=\"outline\" onClick={() => setCapturedImage(null)}>\n                         Clear Image\n                     </Button>\n                </div>\n            )}\n            <canvas ref={canvasRef} className=\"hidden\" />\n            \n            <div>\n                 <Button type=\"button\" onClick={handleAnalyze} disabled={loading || !capturedImage}>\n                    {loading ? (\n                    <>\n                        <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                        Analyzing...\n                    </>\n                    ) : (\n                    <>\n                        <Sparkles className=\"mr-2 h-4 w-4\" />\n                        Analyze Prescription\n                    </>\n                    )}\n                </Button>\n            </div>\n        </CardContent>\n      </Card>\n\n      {error && (\n        <Card className=\"border-destructive\">\n          <CardHeader className=\"flex-row gap-4 items-center\">\n            <AlertTriangle className=\"text-destructive h-6 w-6\" />\n            <div>\n              <CardTitle className=\"text-destructive\">Analysis Failed</CardTitle>\n              <CardDescription className=\"text-destructive/80\">{error}</CardDescription>\n            </div>\n          </CardHeader>\n        </Card>\n      )}\n\n      {result && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"font-headline text-xl flex items-center gap-2\">\n                <FileScan className=\"h-5 w-5 text-primary\" />\n                <span>Transcribed Prescription</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div className=\"space-y-4\">\n              {result.medicines.map((med, index) => (\n                <Card key={index} className=\"p-4\">\n                  <h3 className=\"font-semibold text-lg text-primary flex items-center gap-2\">\n                    <Pill className=\"h-5 w-5\" />\n                    {med.name}\n                  </h3>\n                  <div className=\"mt-2 text-sm text-muted-foreground space-y-1 pl-7\">\n                     <p><strong>Dosage:</strong> {med.dosage}</p>\n                     <p><strong>Frequency:</strong> {med.frequency}</p>\n                     {med.instructions && <p><strong>Instructions:</strong> {med.instructions}</p>}\n                  </div>\n                </Card>\n              ))}\n               {result.medicines.length === 0 && (\n                <p className=\"text-muted-foreground text-center py-4\">\n                    No medicines could be clearly identified in the prescription. Please try a clearer image.\n                </p>\n               )}\n            </div>\n             <div className=\"p-4 bg-amber-100 dark:bg-amber-900/20 rounded-lg text-amber-800 dark:text-amber-300 flex items-start gap-4\">\n                <Info className=\"h-6 w-6 mt-0.5 flex-shrink-0\" />\n                <div>\n                    <h4 className=\"font-bold\">Disclaimer</h4>\n                    <p className=\"text-sm\">{result.disclaimer}</p>\n                </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}