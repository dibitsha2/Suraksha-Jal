{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 223, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-1.5-flash-latest',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/generate-reports-flow.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview Provides a flow to generate realistic, mock public health reports.\n *\n * - generateReports - A function to generate a specified number of health reports.\n * - GenerateReportsInput - The input type for the generateReports function.\n * - GenerateReportsOutput - The return type for the generateReports function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\nimport { subDays, format } from 'date-fns';\n\n\nconst GenerateReportsInputSchema = z.object({\n  count: z.number().int().positive().describe('The number of mock reports to generate.'),\n});\nexport type GenerateReportsInput = z.infer<typeof GenerateReportsInputSchema>;\n\nconst ReportSchema = z.object({\n    id: z.number().describe('A unique ID for the report.'),\n    disease: z.string().describe('The name of the waterborne disease.'),\n    location: z.string().describe('The location of the outbreak (e.g., City, State).'),\n    cases: z.number().int().describe('The number of reported cases.'),\n    date: z.string().describe('The date of the report in YYYY-MM-DD format.'),\n    source: z.enum(['AI', 'Health Worker', 'Community']).describe('The source of the report.'),\n});\nexport type Report = z.infer<typeof ReportSchema>;\n\n\nconst GenerateReportsOutputSchema = z.object({\n    reports: z.array(ReportSchema).describe('An array of generated health reports.'),\n});\nexport type GenerateReportsOutput = z.infer<typeof GenerateReportsOutputSchema>;\n\n\nexport async function generateReports(input: GenerateReportsInput): Promise<GenerateReportsOutput> {\n  return generateReportsFlow(input);\n}\n\n\nconst generateReportsPrompt = ai.definePrompt({\n  name: 'generateReportsPrompt',\n  input: {schema: GenerateReportsInputSchema},\n  output: {schema: GenerateReportsOutputSchema},\n  prompt: `You are a public health data simulator. Your task is to generate a realistic list of recent waterborne disease outbreak reports in India.\n\nGenerate {{count}} reports.\n\n- Each report must have a unique ID.\n- Focus on common waterborne diseases like Cholera, Typhoid, Hepatitis A, Giardiasis, and Dysentery.\n- Use a variety of cities and states within India for the locations.\n- The number of cases should be realistic, ranging from a handful to a few dozen.\n- The dates should be within the last week.\n- The source for all generated reports should be 'AI'.\n`,\n});\n\n\nconst generateReportsFlow = ai.defineFlow(\n  {\n    name: 'generateReportsFlow',\n    inputSchema: GenerateReportsInputSchema,\n    outputSchema: GenerateReportsOutputSchema,\n  },\n  async input => {\n    const {output} = await generateReportsPrompt(input);\n    \n    // Post-process to ensure dates are correct and recent\n    const today = new Date();\n    if (output && output.reports) {\n        output.reports.forEach((report, index) => {\n            report.date = format(subDays(today, index % 7), 'yyyy-MM-dd');\n            report.id = Date.now() + index; // Ensure unique ID\n        });\n    }\n\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;AACA;AAAA;;;;;;;AAGA,MAAM,6BAA6B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1C,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,GAAG,QAAQ,GAAG,QAAQ,CAAC;AAC9C;AAGA,MAAM,eAAe,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1B,IAAI,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACxB,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC7B,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,GAAG,QAAQ,CAAC;IACjC,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC1B,QAAQ,uIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAM;QAAiB;KAAY,EAAE,QAAQ,CAAC;AAClE;AAIA,MAAM,8BAA8B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACzC,SAAS,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,cAAc,QAAQ,CAAC;AAC5C;AAIO,eAAe,gBAAgB,KAA2B;IAC/D,OAAO,oBAAoB;AAC7B;AAGA,MAAM,wBAAwB,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC5C,MAAM;IACN,OAAO;QAAC,QAAQ;IAA0B;IAC1C,QAAQ;QAAC,QAAQ;IAA2B;IAC5C,QAAQ,CAAC;;;;;;;;;;AAUX,CAAC;AACD;AAGA,MAAM,sBAAsB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACvC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,sBAAsB;IAE7C,sDAAsD;IACtD,MAAM,QAAQ,IAAI;IAClB,IAAI,UAAU,OAAO,OAAO,EAAE;QAC1B,OAAO,OAAO,CAAC,OAAO,CAAC,CAAC,QAAQ;YAC5B,OAAO,IAAI,GAAG,CAAA,GAAA,sJAAA,CAAA,SAAM,AAAD,EAAE,CAAA,GAAA,uIAAA,CAAA,UAAO,AAAD,EAAE,OAAO,QAAQ,IAAI;YAChD,OAAO,EAAE,GAAG,KAAK,GAAG,KAAK,OAAO,mBAAmB;QACvD;IACJ;IAEA,OAAO;AACT;;;IA1CoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 334, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/dashboard-health-worker/view-reports/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {generateReports as '403a4e91a980f983a51f42c247683e9971d4897ed7'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 392, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/dashboard-health-worker/view-reports/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/dashboard-health-worker/view-reports/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard-health-worker/view-reports/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAyT,GACtV,uFACA","debugId":null}},
    {"offset": {"line": 406, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/dashboard-health-worker/view-reports/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/dashboard-health-worker/view-reports/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard-health-worker/view-reports/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAqS,GAClU,mEACA","debugId":null}},
    {"offset": {"line": 420, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}