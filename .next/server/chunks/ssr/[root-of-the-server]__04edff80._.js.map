{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 223, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-1.5-flash-latest',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/health-chatbot.ts"],"sourcesContent":["\n'use server';\n\n/**\n * @fileOverview Provides a general-purpose AI health chatbot.\n *\n * - healthChat - A function to interact with the health chatbot.\n * - HealthChatInput - The input type for the healthChat function.\n * - HealthChatOutput - The return type for the healthChat function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst HealthChatInputSchema = z.object({\n  message: z.string().describe('The user\\'s message to the chatbot.'),\n  history: z.array(z.object({\n    role: z.enum(['user', 'model']),\n    content: z.string(),\n  })).optional().describe('The conversation history.'),\n  language: z.string().describe('The language for the response.').optional(),\n});\nexport type HealthChatInput = z.infer<typeof HealthChatInputSchema>;\n\nconst HealthChatOutputSchema = z.object({\n  response: z.string().describe('The chatbot\\'s response to the user.'),\n});\nexport type HealthChatOutput = z.infer<typeof HealthChatOutputSchema>;\n\nexport async function healthChat(input: HealthChatInput): Promise<HealthChatOutput> {\n  return healthChatFlow(input);\n}\n\nconst healthChatPrompt = ai.definePrompt({\n  name: 'healthChatPrompt',\n  input: {schema: HealthChatInputSchema},\n  output: {schema: HealthChatOutputSchema},\n  prompt: `You are \"Suraksha Jal,\" a friendly and helpful AI health assistant specializing in waterborne diseases and general health inquiries. Your goal is to provide clear, accurate, and safe health information.\n\n- If the user asks for medical advice, a diagnosis, or a prescription, you must gently refuse and strongly advise them to consult a qualified healthcare professional. Your suggestions are for informational purposes only.\n- You can answer questions about symptoms, diseases (especially waterborne ones), medication uses, and general health and safety tips (like hygiene and water purification).\n- Keep your responses concise and easy to understand.\n- You have access to the conversation history to maintain context.\n{{#if language}}\n- The user's preferred language is {{language}}. You MUST respond in that language.\n{{/if}}\n\nCurrent User Message:\n{{{message}}}\n`,\n});\n\nconst healthChatFlow = ai.defineFlow(\n  {\n    name: 'healthChatFlow',\n    inputSchema: HealthChatInputSchema,\n    outputSchema: HealthChatOutputSchema,\n  },\n  async input => {\n    // Note: The history is available in the prompt context but not explicitly used here.\n    // In a more complex setup, history would be passed to the model.\n    const {output} = await healthChatPrompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAGA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,wBAAwB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrC,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC7B,SAAS,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACxB,MAAM,uIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;YAAC;YAAQ;SAAQ;QAC9B,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM;IACnB,IAAI,QAAQ,GAAG,QAAQ,CAAC;IACxB,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC,kCAAkC,QAAQ;AAC1E;AAGA,MAAM,yBAAyB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACtC,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAChC;AAGO,eAAe,WAAW,KAAsB;IACrD,OAAO,eAAe;AACxB;AAEA,MAAM,mBAAmB,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IACvC,MAAM;IACN,OAAO;QAAC,QAAQ;IAAqB;IACrC,QAAQ;QAAC,QAAQ;IAAsB;IACvC,QAAQ,CAAC;;;;;;;;;;;;AAYX,CAAC;AACD;AAEA,MAAM,iBAAiB,mHAAA,CAAA,KAAE,CAAC,UAAU,CAClC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,qFAAqF;IACrF,iEAAiE;IACjE,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,iBAAiB;IACxC,OAAO;AACT;;;IAlCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 323, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/dashboard/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {healthChat as '403484bd370d0a2e71f634ac05a48a9e673a8ed461'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 381, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/dashboard/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/dashboard/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA8R,GAC3T,4DACA","debugId":null}},
    {"offset": {"line": 395, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/dashboard/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/dashboard/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA0Q,GACvS,wCACA","debugId":null}},
    {"offset": {"line": 409, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}